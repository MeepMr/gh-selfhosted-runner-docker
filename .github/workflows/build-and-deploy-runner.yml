name: "update self-hosted GitHub runner"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  get-runner-version:
    runs-on: ubuntu-latest
    outputs:
      version-no: ${{ steps.get_version_number.outputs.version_no }}
    steps:
      - id: get_version_number
        run: echo "version_no=$(cut -c2- <<< $(curl -s https://api.github.com/repos/actions/runner/releases/latest | jq -cs --raw-output ".[0].tag_name"))" >> $GITHUB_OUTPUT

  build-github-runner-image:
    runs-on: ubuntu-latest
    needs: get-runner-version
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Authenticate To ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.ghcr_token }}
      - name: Build
        uses: docker/build-push-action@v3
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./github-runner
          file: ./github-runner/selfhosted-runner.dockerfile
          platforms: linux/amd64
          push: true
          build-args:
            - RUNNER_VERSION: ${{ needs.get-runner-version.outputs.version-no}}
          tags: |
            ghcr.io/meepmr/gh-action-runner:latest
            ghcr.io/meepmr/gh-action-runner:${{ needs.get-runner-version.outputs.version-no}}

  deploy:
    environment: vps-1
    name: "Deployment to VPS-1 started"
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/ssh.key
          chmod 600 ~/.ssh/ssh.key
          cat >>~/.ssh/config <<END
          Host vps
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/ssh.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
      - name: deploy
        run: ssh vps '${{ vars.DEPLOYMENT_COMMAND }}'
